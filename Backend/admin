<?php

class admin
{
    private $db;

    public function __construct(Database $db)
    {
        $this->db = $db;
        $this->db->connect();
    }
    public function statistic_log() {
        $connection = $this->db->getConnection();
    
        // Prepare and execute the query to count all logements
        $allStmt = $connection->prepare("SELECT COUNT(*) FROM logement");
        $allStmt->execute();
        $all = $allStmt->fetchColumn();
    
        // Prepare and execute the query to count vacant logements
        $vacantStmt = $connection->prepare("SELECT COUNT(*) FROM logement WHERE is_vacant = true");
        $vacantStmt->execute();
        $vacant = $vacantStmt->fetchColumn();
    
        // Calculate the percentage of vacant logements
        if ($all > 0) {
            $vacantPercentage = ($vacant / $all) * 100;
        } else {
            $vacantPercentage = 0;
        }
    
        // Return the results as an associative array
        return array('vacant' => $vacantPercentage, 'occupe' => 100 - $vacantPercentage, 'all' => $all);
    }
    public function statistic_facture(){
        $connection = $this->db->getConnection();
        $curmois = date('n'); // Current month
        $curyear = date('Y'); // Current year
        
        // Prepare and execute the statements
        $paid_stmt = $connection->prepare("SELECT count(*) FROM facture WHERE fac_etat = 'paid' AND DATE_PART('month', fac_date) = :curmois - 1 AND DATE_PART('year', fac_date) = :curyear");
        $unpaid_stmt = $connection->prepare("SELECT count(*) FROM facture WHERE fac_etat = 'unpaid' AND DATE_PART('month', fac_date) = :curmois - 1 AND DATE_PART('year', fac_date) = :curyear");
        $overide_stmt = $connection->prepare("SELECT count(*) FROM facture WHERE fac_etat = 'unpaid' AND DATE_PART('month', fac_date) = :curmois - 2 AND DATE_PART('year', fac_date) = :curyear");
        $all_facture_stmt = $connection->prepare("SELECT COUNT(*) FROM facture WHERE DATE_PART('month', fac_date) >= :curmois - 2 AND DATE_PART('year', fac_date) = :curyear");
        
        // Bind values to the placeholders
        $paid_stmt->bindValue(':curmois', $curmois, PDO::PARAM_INT);
        $paid_stmt->bindValue(':curyear', $curyear, PDO::PARAM_INT);
        $unpaid_stmt->bindValue(':curmois', $curmois, PDO::PARAM_INT);
        $unpaid_stmt->bindValue(':curyear', $curyear, PDO::PARAM_INT);
        $overide_stmt->bindValue(':curmois', $curmois, PDO::PARAM_INT);
        $overide_stmt->bindValue(':curyear', $curyear, PDO::PARAM_INT);
        $all_facture_stmt->bindValue(':curmois', $curmois, PDO::PARAM_INT);
        $all_facture_stmt->bindValue(':curyear', $curyear, PDO::PARAM_INT);
        
        // Execute the statements
        $paid_stmt->execute();
        $unpaid_stmt->execute();
        $overide_stmt->execute();
        $all_facture_stmt->execute();
        
        // Fetch the results
        $paid = $paid_stmt->fetchColumn();
        $unpaid = $unpaid_stmt->fetchColumn();
        $overide = $overide_stmt->fetchColumn();
        $all_facture = $all_facture_stmt->fetchColumn();
        
        if ($all_facture == 0) {
            $paid_prc = 0;
            $unpaid_prc = 0;
            $overide_prc = 0;
        } else {
            $paid_prc = ($paid / $all_facture) * 100; // Percentage of last month's paid invoices
            $unpaid_prc = ($unpaid / $all_facture) * 100; // Percentage of last month's unpaid invoices
            $overide_prc = ($overide / $all_facture) * 100; // Percentage of unpaid invoices from two months ago
        }
        
        return array(
            'paid' => $paid_prc,
            'unpaid' => $unpaid_prc,
            'overide' => $overide_prc,
            'all' => $all_facture // Total invoices
        );
    }
    

}    