<?php
//require_once (Facture.php);
class admin
{
    public $nom;
    public $prenom;
    public $adm_ID;
    public $email;
    private $db;

    public function __construct(Database $db)
    {
        $this->db = $db;
        $this->db->connect();
    }
    public function statistic_log() {
        $connection = $this->db->getConnection();
    
        // Prepare and execute the query to count all logements
        $allStmt = $connection->prepare("SELECT COUNT(*) FROM logement");
        $allStmt->execute();
        $all = $allStmt->fetchColumn();
    
        // Prepare and execute the query to count vacant logements
        $vacantStmt = $connection->prepare("SELECT COUNT(*) FROM logement WHERE is_vacant = true");
        $vacantStmt->execute();
        $vacant = $vacantStmt->fetchColumn();
    
        // Calculate the percentage of vacant logements
        if ($all > 0) {
            $vacantPercentage = ($vacant / $all) * 100;
        } else {
            $vacantPercentage = 0;
        }
    
        // Return the results as an associative array
        return array('vacant' => $vacantPercentage, 'occupe' => 100 - $vacantPercentage, 'all' => $all);
    }
    public function statistic_facture(){
        $connection = $this->db->getConnection();
        $curmois = date('n'); // Current month
        $curyear = date('Y'); // Current year
        
        // Prepare and execute the statements
        $paid_stmt = $connection->prepare("SELECT count(*) FROM facture WHERE fac_etat = 'paid' AND DATE_PART('month', fac_date) = :curmois - 1 AND DATE_PART('year', fac_date) = :curyear");
        $unpaid_stmt = $connection->prepare("SELECT count(*) FROM facture WHERE fac_etat = 'unpaid' AND DATE_PART('month', fac_date) = :curmois - 1 AND DATE_PART('year', fac_date) = :curyear");
        $overide_stmt = $connection->prepare("SELECT count(*) FROM facture WHERE fac_etat = 'unpaid' AND DATE_PART('month', fac_date) = :curmois - 2 AND DATE_PART('year', fac_date) = :curyear");
        $all_facture_stmt = $connection->prepare("SELECT COUNT(*) FROM facture WHERE DATE_PART('month', fac_date) >= :curmois - 2 AND DATE_PART('year', fac_date) = :curyear");
        
        // Bind values to the placeholders
        $paid_stmt->bindValue(':curmois', $curmois, PDO::PARAM_INT);
        $paid_stmt->bindValue(':curyear', $curyear, PDO::PARAM_INT);
        $unpaid_stmt->bindValue(':curmois', $curmois, PDO::PARAM_INT);
        $unpaid_stmt->bindValue(':curyear', $curyear, PDO::PARAM_INT);
        $overide_stmt->bindValue(':curmois', $curmois, PDO::PARAM_INT);
        $overide_stmt->bindValue(':curyear', $curyear, PDO::PARAM_INT);
        $all_facture_stmt->bindValue(':curmois', $curmois, PDO::PARAM_INT);
        $all_facture_stmt->bindValue(':curyear', $curyear, PDO::PARAM_INT);
        
        // Execute the statements
        $paid_stmt->execute();
        $unpaid_stmt->execute();
        $overide_stmt->execute();
        $all_facture_stmt->execute();
        
        // Fetch the results
        $paid = $paid_stmt->fetchColumn();
        $unpaid = $unpaid_stmt->fetchColumn();
        $overide = $overide_stmt->fetchColumn();
        $all_facture = $all_facture_stmt->fetchColumn();
        
        if ($all_facture == 0) {
            $paid_prc = 0;
            $unpaid_prc = 0;
            $overide_prc = 0;
        } else {
            $paid_prc = ($paid / $all_facture) * 100; // Percentage of last month's paid invoices
            $unpaid_prc = ($unpaid / $all_facture) * 100; // Percentage of last month's unpaid invoices
            $overide_prc = ($overide / $all_facture) * 100; // Percentage of unpaid invoices from two months ago
        }
        
        return array(
            'paid' => $paid_prc,
            'unpaid' => $unpaid_prc,
            'overide' => $overide_prc,
            'all' => $all_facture // Total invoices
        );
    }

    
    public function all_factures() {
        // Get the database connection
        $connection = $this->db->getConnection();
         $fac = $connection->prepare("SELECT * FROM facture  ORDER BY fac_date DESC");
    
        // Execute the query
        $fac->execute();
    
        // Fetch all results
        $results = $fac->fetchAll(PDO::FETCH_ASSOC);
    
        // Return the fetched results
        return $results;
    }
    public function affiche_reclamations() {
        // Get the database connection
        $connection = $this->db->getConnection();
         $rec = $connection->prepare("SELECT * FROM reclamation ORDER BY rec_date DESC");
    
        // Execute the query
        $rec->execute();
    
        // Fetch all results
        $results = $rec->fetchAll(PDO::FETCH_ASSOC);
    
        // Return the fetched results
        return $results;
    }
    public function updatePersonalInfo($email, $nom, $prenom, $adm_ID) {
        try {
            // Get the database connection
            $connection = $this->db->getConnection();
    
            // Prepare the SQL query to update the admin's personal information
            $sql = $connection->prepare("UPDATE admin SET email = :email, nom = :nom, prenom = :prenom WHERE adm_id = :adm_ID");
    
            // Bind the parameters to the SQL query
            $sql->bindParam(':email', $email, PDO::PARAM_STR);
            $sql->bindParam(':nom', $nom, PDO::PARAM_STR);
            $sql->bindParam(':prenom', $prenom, PDO::PARAM_STR);
            $sql->bindParam(':adm_ID', $adm_ID, PDO::PARAM_INT);
    
            // Execute the query
            if ($sql->execute()) {
                return true;
            } else {
                throw new Exception("Erreur lors de la mise à jour des informations personnelles.");
            }
        } catch (PDOException $e) {
            // Handle potential database errors
            error_log("Database error: " . $e->getMessage());
            throw new Exception("Erreur lors de la mise à jour des informations personnelles.");
        }
    }
    public function checkCurrentPassword($currentPassword, $adm_ID) {
        // Get the database connection
        $connection = $this->db->getConnection();
    
        // Prepare the SQL query to select the password for the given adm_ID
        $sql = "SELECT password FROM admin WHERE adm_id = :adm_ID";
        $stmt = $connection->prepare($sql);
    
        // Bind the 'adm_ID' parameter to the SQL query
        $stmt->bindParam(':adm_ID', $adm_ID, PDO::PARAM_INT);
    
        // Execute the query
        $stmt->execute();
    
        // Fetch the admin data
        $adm = $stmt->fetch(PDO::FETCH_ASSOC);
    
        // Verify the current password against the stored hash
        if ($adm && password_verify($currentPassword, $adm['password'])) {
            return true;
        } else {
            return false;
        }
    }
    
    public function changePassword($currentPassword, $newPassword, $adm_ID)
    {
        $connection = $this->db->getConnection();
        
        // Vérifier le mot de passe actuel
        if (!$this->checkCurrentPassword($currentPassword, $adm_ID)) {
            throw new Exception("Le mot de passe actuel est incorrect.");
        }
    
        // Hacher le nouveau mot de passe
        $hashedPassword = password_hash($newPassword, PASSWORD_BCRYPT);
    
        // Mettre à jour le mot de passe dans la base de données
        $sql = "UPDATE admin SET password = :newPassword WHERE adm_id = :adm_ID";
        $stmt = $connection->prepare($sql);
        $stmt->bindParam(':newPassword', $hashedPassword);
        $stmt->bindParam(':adm_ID', $adm_ID); // Corrected the parameter name
    
        if ($stmt->execute()) {
            return true;
        } else {
            throw new Exception("Erreur lors de la mise à jour du mot de passe.");
        }
    }
    public function all_users(){
        $connection = $this->db->getConnection();
        $users= $connection->prepare ("SELECT * FROM residant ");
        // Execute the query
        $users->execute();
    
        // Fetch all results
        $results = $users->fetchAll(PDO::FETCH_ASSOC);
        return $results;
    }
    public function searchUser($nom, $prenom) {
        $connection = $this->db->getConnection();
        $query = $connection->prepare("SELECT res_id FROM residant WHERE nom = :nom AND prenom = :prenom");
    
        // Liaison des valeurs aux paramètres
        $query->bindParam(':nom', $nom);
        $query->bindParam(':prenom', $prenom);
    
        // Exécution de la requête
        $query->execute();
    
        // Récupération du résultat
        $result = $query->fetch(PDO::FETCH_ASSOC);
    
        return $result; // Retourne le résultat de la recherche
    }
    
    
    // ajouter une nouvelle facture 
    public function addfacture(facture $newfac ,$nom,$prenom) {
        $connection = $this->db->getConnection();
        $res_ID = $this->searchuser($nom, $prenom); // Correction de l'appel de la méthode searchuser
    
        // Vérification si l'utilisateur existe
        if (!$res_ID) {
            return false; // L'utilisateur n'existe pas, la facture ne peut pas être créée
        }
    
        $query = $connection->prepare("INSERT INTO facture (fac_no, fac_date, fac_total, fac_type, fac_etat, fac_echeance, res_id) VALUES (:fac_no, :fac_date, :fac_total, :fac_type, :fac_etat, :fac_echeance, :res_id)");
    
        // Liaison des valeurs aux paramètres
        $query->bindParam(':fac_no', $newfac->fac_no);
        $query->bindParam(':fac_date', $newfac->fac_date);
        $query->bindParam(':fac_total', $newfac->fac_total);
        $query->bindParam(':fac_type', $newfac->fac_type);
        $query->bindParam(':fac_etat', $newfac->fac_etat);
        $query->bindParam(':fac_echeance', $newfac->fac_echeance);
        $query->bindParam(':res_id', $res_ID['res_id']); // Récupération de l'ID de l'utilisateur
    
        // Exécution de la requête
        if ($query->execute()) {
            return true; // La facture a été ajoutée avec succès
        } else {
            return false; // Une erreur s'est produite lors de l'ajout de la facture
        }
    }
    public function update_user(residant $user){
        $connection = $this->db->getConnection();
        $query=$connection->prepare("UPDATE admin SET nom =:nom ,prenom =:prnom ,email =:email ,cin =:cin ,telephone = :telephone,proffession =:profession WHERE res_id = :res_ID");
        $query->bindParam(':nom', $user->nom);
        $query->bindParam(':prenom', $user->prenom);
        $query->bindParam(':email', $user->email);
        $query->bindParam(':cin', $user->cin);
        $query->bindParam(':telephone', $user->telephone);
        $query->bindParam(':profession', $user->profession);
         // Exécution de la requête
         if ($query->execute()) {
            return true; // les informations du residant mis ajours avec succes
        } else {
            return false; // Une erreur s'est produite lors de la mis ajours des informations 
        }
    }
    public function supprimer_residant($user_id) {
        // Connexion à la base de données
        $connection = $this->db->getConnection();
        
        // Préparation de la requête de suppression
        $query = $connection->prepare("DELETE FROM users WHERE user_id = :user_id");
        
        // Liaison du paramètre
        $query->bindParam(':user_id', $user_id, PDO::PARAM_INT);
        
        // Exécution de la requête
        if ($query->execute()) {
            return true; // Utilisateur supprimé avec succès
        } else {
            return false; // Une erreur s'est produite lors de la suppression de l'utilisateur
        }
    }
    //l'admin peut mis ajours l'atat dune reclamation non annulé 
    public function update_rec($rec_ID, $new_status) {
        try {
            $connection = $this->db->getConnection();
    
            // Préparer et exécuter la requête pour obtenir l'état de la réclamation
            $etat = $connection->prepare("SELECT rec_etat FROM reclamation WHERE rec_id = :rec_ID");
            $etat->bindParam(':rec_ID', $rec_ID, PDO::PARAM_INT);
            $etat->execute();
    
            // Récupérer le résultat
            $result = $etat->fetch(PDO::FETCH_ASSOC);
    
            // Vérifier si la réclamation est résolue ou annulée
            if ($result && ($result['rec_etat'] == 'resolu' || $result['rec_etat'] == 'annulé')) {
                return false;
            } else {
                // Préparer et exécuter la requête pour mettre à jour l'état de la réclamation
                $sql = $connection->prepare("UPDATE reclamation SET rec_etat = :new_status WHERE rec_id = :rec_ID");
                $sql->bindParam(':rec_ID', $rec_ID, PDO::PARAM_INT);
                $sql->bindParam(':new_status', $new_status);
                $sql->execute();
                return true;
            }
        } catch (PDOException $e) {
            // Gérer les exceptions en cas d'erreur
            echo "Erreur : " . $e->getMessage();
            return false;
        } finally {
            // Fermer la connexion à la base de données
            $connection = null;
        }
    }
    //statistics reclamation 
    function getReclamationsStats() {
       
        try {
            $connection = $this->db->getConnection();

            // Préparer le tableau des résultats
            $stats = [];
            // Obtenir la date actuelle
            $currentDate = new DateTime();
            
            // Boucle pour les 6 derniers mois
            for ($i = 0; $i < 6; $i++) {
                // Calculer le début et la fin du mois
                $startDate = clone $currentDate;
                $startDate->modify('first day of this month');
                $startDate->modify("-$i month");
                $endDate = clone $startDate;
                $endDate->modify('last day of this month');
                
                // Formater les dates pour la requête SQL
                $startDateStr = $startDate->format('Y-m-d');
                $endDateStr = $endDate->format('Y-m-d');
                
                // Préparer la requête SQL
                $sql = "SELECT COUNT(*) as count FROM reclamations WHERE date_reclamation BETWEEN :start_date AND :end_date";
                $stmt = $connection->prepare($sql);
                
                // Exécuter la requête avec les paramètres
                $stmt->execute([
                    ':start_date' => $startDateStr,
                    ':end_date' => $endDateStr
                ]);
                
                // Obtenir le résultat
                $result = $stmt->fetch(PDO::FETCH_ASSOC);
                
                // Ajouter le résultat au tableau des statistiques
                $stats[] = [
                    'month' => $startDate->format('F Y'),
                    'count' => $result['count']
                ];
            }
            
            return $stats;
        } catch (PDOException $e) {
            echo "Erreur de connexion : " . $e->getMessage();
            return [];
        }
    }
    

   //ajouter , modifier et supprimer un logement 
   public function add_log(logement $newlogement) {
    try {
        // Obtenir la connexion à la base de données
        $connection = $this->db->getConnection();
        
        // Préparer la requête SQL
        $sql = "INSERT INTO logements (type_log, is_ameliore, description, mc, piece, equip_id, is_vacant) 
                VALUES (:type_log, :is_ameliore, :description, :mc, :piece, :equip_id, :is_vacant)";
        $stmt = $connection->prepare($sql);

        // Liaison des paramètres
        $stmt->bindParam(':type_log', $newlogement->type_log);
        $stmt->bindParam(':is_ameliore', $newlogement->is_ameliore);
        $stmt->bindParam(':description', $newlogement->desc);
        $stmt->bindParam(':mc', $newlogement->mc);
        $stmt->bindParam(':piece', $newlogement->piece);
        $stmt->bindParam(':equip_id', $newlogement->equip_id);
        $stmt->bindParam(':is_vacant', $newlogement->is_vacant);

        // Exécuter la requête
        if ($stmt->execute()) {
            return true; // Nouveau logement ajouté avec succès
        } else {
            return false; // Échec de l'ajout du logement
        }
    } catch (PDOException $e) {
        // Gestion des erreurs PDO
        error_log("Erreur PDO : " . $e->getMessage());
        return false;
    }
}
public function update_log(logement $logement) {
    try {
        // Obtenir la connexion à la base de données
        $connection = $this->db->getConnection();
        
        // Préparer la requête SQL
        $sql = "UPDATE logements 
                SET type_log = :type_log, 
                    is_ameliore = :is_ameliore, 
                    description = :description, 
                    mc = :mc, 
                    piece = :piece, 
                    equip_id = :equip_id, 
                    is_vacant = :is_vacant 
                WHERE log_id = :log_id";
        $stmt = $connection->prepare($sql);

        // Liaison des paramètres
        $stmt->bindParam(':type_log', $logement->type_log);
        $stmt->bindParam(':is_ameliore', $logement->is_ameliore);
        $stmt->bindParam(':description', $logement->desc);
        $stmt->bindParam(':mc', $logement->mc);
        $stmt->bindParam(':piece', $logement->piece);
        $stmt->bindParam(':equip_id', $logement->equip_id);
        $stmt->bindParam(':is_vacant', $logement->is_vacant);
        $stmt->bindParam(':log_id', $logement->log_id);

        // Exécuter la requête
        if ($stmt->execute()) {
            return true; // Logement mis à jour avec succès
        } else {
            return false; // Échec de la mise à jour du logement
        }
    } catch (PDOException $e) {
        // Gestion des erreurs PDO
        error_log("Erreur PDO : " . $e->getMessage());
        return false;
    }
}
public function supprimer_log($log_id) {
    try {
        // Connexion à la base de données
        $connection = $this->db->getConnection();

        // Vérifier si le logement existe
        $query = $connection->prepare("SELECT 1 FROM logement WHERE log_id = :log_id");
        $query->bindParam(':log_id', $log_id, PDO::PARAM_INT);
        $query->execute();

        // Si le logement n'existe pas, lancer une exception
        if ($query->rowCount() == 0) {
            throw new Exception("Le logement avec l'ID $log_id n'existe pas.");
        }

        // Préparation de la requête de suppression
        $query = $connection->prepare("DELETE FROM logement WHERE log_id = :log_id");
        $query->bindParam(':log_id', $log_id, PDO::PARAM_INT);

        // Exécution de la requête
        if ($query->execute()) {
            return true; // Logement supprimé avec succès
        } else {
            // Gérer l'erreur de suppression en lançant une exception
            throw new Exception("Erreur lors de la suppression du logement: " . $query->errorInfo()[2]);
        }
    } catch (Exception $e) {
        // Gestion des erreurs et retour de faux en cas d'erreur
        error_log($e->getMessage()); // Log l'erreur pour le debugging
        return false; // Retourner false en cas d'erreur
    }
}



}







                                                                                                                 


    
   
    
