<?php
class residant
{
    public $res_ID;
    public $log_ID;
    public $nom;
    public $prenom;
    public $cin;
    public $mot_de_passe;
    public $email;
    public $telephone;
    public $profession;
    public $date_ajout;

    private $db;

    public function __construct(Database $db)
    {
        $this->db = $db;
        $this->db->connect();
    }

    // API endpoint function to handle user login
    public function loginUser($email, $password)
    {
        try {
            // Get the established connection
            $connection = $this->db->getConnection();
            $sql = $connection->prepare('SELECT password FROM residant WHERE email = ?');
            $sql->execute([$email]);
            $user = $sql->fetch(PDO::FETCH_ASSOC);

            if ($user) {
                // we gonna unhased the password from the db cuz the database store the password hashed
                if ($password == $user['password']) { //compare the unhashed pass with the password we get from the request
                    // Generate JWT token
                    $jwtHandler = new JwtHandler();
                    $admin = false;
                    $jwt_token = $jwtHandler->generateJwtToken($user, $admin);

                    // Return success response with JWT token
                    return array('status' => 'success', 'jwt_token' => $jwt_token);
                } else {
                    // Return error response if password is incorrect
                    return array('status' => 'error', 'message' => 'Invalid password');
                }
            } else {
                // Return error response if user does not exist
                return array('status' => 'error', 'message' => 'User not found');
            }
        } catch (PDOException $e) {
            // Return error response if an exception occurs
            return array('status' => 'error', 'message' => $e->getMessage());
        }
    }
    //changement de mot de passe
    public function changePassword($currentPassword, $newPassword ,$res_ID)
    {
        $connection = $this->db->getConnection();
        // Vérifier le mot de passe actuel
        if (!$this->checkCurrentPassword($currentPassword,$res_ID)) {
            throw new Exception("Le mot de passe actuel est incorrect.");
        }

        // Hacher le nouveau mot de passe
        $hashedPassword = password_hash($newPassword, PASSWORD_BCRYPT);

        // Mettre à jour le mot de passe dans la base de données
        $sql = "UPDATE residant SET password = :newPassword WHERE res_id = :res_ID";
        $stmt = $connection->prepare($sql);
        $stmt->bindParam(':newPassword', $hashedPassword);
        $stmt->bindParam(':userId', $this->$res_ID);

        if ($stmt->execute()) {
            return true;
        } else {
            throw new Exception("Erreur lors de la mise à jour du mot de passe.");
        }
    }
    private function checkCurrentPassword($currentPassword ,$res_ID)
    {
        $connection = $this->db->getConnection();

        $sql = "SELECT password FROM residant WHERE res_id = :userId";
        $stmt = $connection->prepare($sql);
        $stmt->bindParam(':userId', $this->$res_ID);
        $stmt->execute();

        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($result && password_verify($currentPassword, $result['password'])) {
            return true;
        } else {
            return false;
        }
    }
    // Méthode pour mettre à jour les informations personnelles
    public function updatePersonalInfo($email, $telephone, $res_ID)
    {
        $connection = $this->db->getConnection();

        $sql = "UPDATE residant SET email = :email, telephone = :telephone WHERE res_id = :res_ID";
        $stmt = $connection->prepare($sql);
        $stmt->bindParam(':email', $email);
        $stmt->bindParam(':telephone', $telephone);
        $stmt->bindParam(':userId', $this->$res_ID);

        if ($stmt->execute()) {
            return true;
        } else {
            throw new Exception("Erreur lors de la mise à jour des informations personnelles.");
        }
    }
}
